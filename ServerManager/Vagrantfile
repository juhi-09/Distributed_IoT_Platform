# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.network "forwarded_port", guest: 57, host: 5777
config.vm.box = "semifinalbox2"
	config.vm.hostname = "1523955558030733322"
   #config.vm.communicator = :ssh
   
  config.vm.network "public_network", type: "dhcp", bridge: ["wlp2s0", "wlp3s0"]

  # Disable automatic box update checking. If you disable this, then
  # boxes wil65l only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
#
   #   system "vagrant plugin install vagrant-proxyconf"
   #if Vagrant.has_plugin?("vagrant-proxyconf")
   # config.proxy.http     = "http://proxy.iiit.ac.in:8080/"
  #  config.proxy.https    = "http://proxy.iiit.ac.in:8080/"
 #   config.proxy.ftp = "http://proxy.iiit.ac.in:8080/"
#   config.proxy.no_proxy = "localhost, 127.0.0.1, /var/run/docker.sock, .sock, iiit.ac.in, .iiit.ac.in, iiit.net, .iiit.net, 172.16.0.0/12, 192.168.0.0/16, 10.0.0.0/8"   
#   end


  #config.vm.network "private_network", ip: "10.3.1.144"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network"
  
  #config.vm.provision "shell", inline: "docker login --username paruljainsre02 --password-stdin"
  
  #config.vm.provision "docker" do |d|
  #d.pull_images "paruljain20172107/get-started:part2"
  
  
  #d.pull_images "paruljain20172107/database5:part2"
  
  
  #d.run 'paruljain20172107/get-started',args: '-p 4000:80'
  #d.has_ssh=true
  #end
  
  #config.vm.provision "shell", path: "bootstrap.sh"
	
config.vm.provision "shell", path: "getvmip.sh"


#config.vm.provision "shell", inline: <<-SHELL
#	a="$(hostname -I)" | stringarray=($a) | echo ${stringarray[1]} | tee myvmip.txt	
#SHELL
  
end
